<?php

declare(strict_types=1);

namespace ApeDevDe\MicrosoftGraphSdk\Models;

/**
 * CloudPcProvisioningPolicy
 */
class CloudPcProvisioningPolicy
{
    /** @var array<string, mixed> Raw data from API response */
    private array $rawData = [];

    /** The unique identifier for an entity. Read-only. */
    public ?string $id = null;

    /** The URL of the alternate resource that links to this provisioning policy. Read-only. */
    public ?string $alternateResourceUrl = null;

    /** 
     * Indicates the Windows Autopatch settings for Cloud PCs using this provisioning policy. The settings take effect when the tenant enrolls in Autopatch and the managedType of the microsoftManagedDesktop property is set as starterManaged. Supports $select.
     * @var CloudPcProvisioningPolicyAutopatch|\stdClass|null
     */
    public mixed $autopatch = null;

    /** The display name of the Cloud PC group that the Cloud PCs reside in. Read-only. */
    public ?string $cloudPcGroupDisplayName = null;

    /** The template used to name Cloud PCs provisioned using this policy. The template can contain custom text and replacement tokens, including %USERNAME:x% and %RAND:x%, which represent the user's name and a randomly generated number, respectively. For example, CPC-%USERNAME:4%-%RAND:5% means that the name of the Cloud PC starts with CPC-, followed by a four-character username, a - character, and then five random characters. The total length of the text generated by the template can't exceed 15 characters. Supports $filter, $select, and $orderby. */
    public ?string $cloudPcNamingTemplate = null;

    /** The provisioning policy description. Supports $filter, $select, and $orderBy. */
    public ?string $description = null;

    /** The display name for the provisioning policy. */
    public ?string $displayName = null;

    /** 
     * Specifies a list ordered by priority on how Cloud PCs join Microsoft Entra ID (Azure AD). Supports $select.
     * @var CloudPcDomainJoinConfiguration[]
     */
    public array $domainJoinConfigurations = [];

    /** True if the provisioned Cloud PC can be accessed by single sign-on. False indicates that the provisioned Cloud PC doesn't support this feature. The default value is false. Windows 365 users can use single sign-on to authenticate to Microsoft Entra ID with passwordless options (for example, FIDO keys) to access their Cloud PC. Optional. */
    public ?bool $enableSingleSignOn = null;

    /** The number of hours to wait before reprovisioning/deprovisioning happens. Read-only. */
    public ?float $gracePeriodInHours = null;

    /** The display name of the operating system image that is used for provisioning. For example, Windows 11 Preview + Microsoft 365 Apps 23H2 23H2. Supports $filter, $select, and $orderBy. */
    public ?string $imageDisplayName = null;

    /** The unique identifier that represents an operating system image that is used for provisioning new Cloud PCs. The format for a gallery type image is: {publisherNameofferNameskuName}. Supported values for each of the parameters are:publisher: Microsoftwindowsdesktop offer: windows-ent-cpc sku: 21h1-ent-cpc-m365, 21h1-ent-cpc-os, 20h2-ent-cpc-m365, 20h2-ent-cpc-os, 20h1-ent-cpc-m365, 20h1-ent-cpc-os, 19h2-ent-cpc-m365, and 19h2-ent-cpc-os Supports $filter, $select, and $orderBy. */
    public ?string $imageId = null;

    /**  */
    public ?CloudPcProvisioningPolicyImageType $imageType = null;

    /** When true, the local admin is enabled for Cloud PCs; false indicates that the local admin isn't enabled for Cloud PCs. The default value is false. Supports $filter, $select, and $orderBy. */
    public ?bool $localAdminEnabled = null;

    /** 
     * The specific settings to microsoftManagedDesktop that enables Microsoft Managed Desktop customers to get device managed experience for Cloud PC. To enable microsoftManagedDesktop to provide more value, an admin needs to specify certain settings in it. Supports $filter, $select, and $orderBy.
     * @var MicrosoftManagedDesktop|\stdClass|null
     */
    public mixed $microsoftManagedDesktop = null;

    /** 
     * Specifies the type of license used when provisioning Cloud PCs using this policy. By default, the license type is dedicated if the provisioningType isn't specified when you create the cloudPcProvisioningPolicy. You can't change this property after the cloudPcProvisioningPolicy was created. Possible values are: dedicated, shared, unknownFutureValue.
     * @var CloudPcProvisioningType|\stdClass|null
     */
    public mixed $provisioningType = null;

    /** 
     * Indicates a specific Windows setting to configure during the creation of Cloud PCs for this provisioning policy. Supports $select.
     * @var CloudPcWindowsSetting|\stdClass|null
     */
    public mixed $windowsSetting = null;

    /** 
     * A defined collection of provisioning policy assignments. Represents the set of Microsoft 365 groups and security groups in Microsoft Entra ID that have provisioning policy assigned. Returned only on $expand. For an example about how to get the assignments relationship, see Get cloudPcProvisioningPolicy.
     * @var CloudPcProvisioningPolicyAssignment[]
     */
    public array $assignments = [];


    /**
     * Constructor - fast deserialization
     * @param array<string, mixed> $data
     */
    public function __construct(array $data = [])
    {
        $this->rawData = $data;
        if (isset($data['id'])) {
            $this->id = $data['id'];
        }
        if (isset($data['alternateResourceUrl'])) {
            $this->alternateResourceUrl = $data['alternateResourceUrl'];
        }
        if (isset($data['autopatch'])) {
            $this->autopatch = is_array($data['autopatch']) ? new CloudPcProvisioningPolicyAutopatch($data['autopatch']) : $data['autopatch'];
        }
        if (isset($data['cloudPcGroupDisplayName'])) {
            $this->cloudPcGroupDisplayName = $data['cloudPcGroupDisplayName'];
        }
        if (isset($data['cloudPcNamingTemplate'])) {
            $this->cloudPcNamingTemplate = $data['cloudPcNamingTemplate'];
        }
        if (isset($data['description'])) {
            $this->description = $data['description'];
        }
        if (isset($data['displayName'])) {
            $this->displayName = $data['displayName'];
        }
        if (isset($data['domainJoinConfigurations'])) {
            $this->domainJoinConfigurations = $data['domainJoinConfigurations'];
        }
        if (isset($data['enableSingleSignOn'])) {
            $this->enableSingleSignOn = $data['enableSingleSignOn'];
        }
        if (isset($data['gracePeriodInHours'])) {
            $this->gracePeriodInHours = $data['gracePeriodInHours'];
        }
        if (isset($data['imageDisplayName'])) {
            $this->imageDisplayName = $data['imageDisplayName'];
        }
        if (isset($data['imageId'])) {
            $this->imageId = $data['imageId'];
        }
        if (isset($data['imageType'])) {
            $this->imageType = is_array($data['imageType']) ? new CloudPcProvisioningPolicyImageType($data['imageType']) : $data['imageType'];
        }
        if (isset($data['localAdminEnabled'])) {
            $this->localAdminEnabled = $data['localAdminEnabled'];
        }
        if (isset($data['microsoftManagedDesktop'])) {
            $this->microsoftManagedDesktop = is_array($data['microsoftManagedDesktop']) ? new MicrosoftManagedDesktop($data['microsoftManagedDesktop']) : $data['microsoftManagedDesktop'];
        }
        if (isset($data['provisioningType'])) {
            $this->provisioningType = is_array($data['provisioningType']) ? new CloudPcProvisioningType($data['provisioningType']) : $data['provisioningType'];
        }
        if (isset($data['windowsSetting'])) {
            $this->windowsSetting = is_array($data['windowsSetting']) ? new CloudPcWindowsSetting($data['windowsSetting']) : $data['windowsSetting'];
        }
        if (isset($data['assignments'])) {
            $this->assignments = $data['assignments'];
        }
    }

    /**
     * Get raw data from API response
     * @return array<string, mixed>
     */
    public function getRaw(): array
    {
        return $this->rawData;
    }
}
