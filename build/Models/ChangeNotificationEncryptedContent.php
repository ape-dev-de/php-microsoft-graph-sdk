<?php

declare(strict_types=1);

namespace ApeDevDe\MicrosoftGraphSdk\Models;

/**
 * ChangeNotificationEncryptedContent
 */
class ChangeNotificationEncryptedContent
{
    /**
     * Base64-encoded encrypted data that produces a full resource respresented as JSON. The data has been encrypted with the provided dataKey using an AES/CBC/PKCS5PADDING cipher suite.
     */
    private ?string $data;

    /**
     * Base64-encoded symmetric key generated by Microsoft Graph to encrypt the data value and to generate the data signature. This key is encrypted with the certificate public key that was provided during the subscription. It must be decrypted with the certificate private key before it can be used to decrypt the data or verify the signature. This key has been encrypted with the following cipher suite: RSA/ECB/OAEPWithSHA1AndMGF1Padding.
     */
    private ?string $dataKey;

    /**
     * Base64-encoded HMAC-SHA256 hash of the data for validation purposes.
     */
    private ?string $dataSignature;

    /**
     * ID of the certificate used to encrypt the dataKey.
     */
    private ?string $encryptionCertificateId;

    /**
     * Hexadecimal representation of the thumbprint of the certificate used to encrypt the dataKey.
     */
    private ?string $encryptionCertificateThumbprint;

    public function getData(): ?string
    {
        return $this->data;
    }

    public function setData(?string $data): self
    {
        $this->data = $data;
        return $this;
    }

    public function getDataKey(): ?string
    {
        return $this->dataKey;
    }

    public function setDataKey(?string $dataKey): self
    {
        $this->dataKey = $dataKey;
        return $this;
    }

    public function getDataSignature(): ?string
    {
        return $this->dataSignature;
    }

    public function setDataSignature(?string $dataSignature): self
    {
        $this->dataSignature = $dataSignature;
        return $this;
    }

    public function getEncryptionCertificateId(): ?string
    {
        return $this->encryptionCertificateId;
    }

    public function setEncryptionCertificateId(?string $encryptionCertificateId): self
    {
        $this->encryptionCertificateId = $encryptionCertificateId;
        return $this;
    }

    public function getEncryptionCertificateThumbprint(): ?string
    {
        return $this->encryptionCertificateThumbprint;
    }

    public function setEncryptionCertificateThumbprint(?string $encryptionCertificateThumbprint): self
    {
        $this->encryptionCertificateThumbprint = $encryptionCertificateThumbprint;
        return $this;
    }

}
