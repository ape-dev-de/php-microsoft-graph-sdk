<?php

declare(strict_types=1);

namespace ApeDevDe\MicrosoftGraphSdk\Models;

/**
 * SecurityVulnerability
 */
class SecurityVulnerability
{
    /** @var array<string, mixed> Raw data from API response */
    private array $rawData = [];

    /** The unique identifier for an entity. Read-only. */
    public ?string $id = null;

    /** Indicates whether this vulnerability has any known exploits associated to known bad actors. */
    public ?bool $activeExploitsObserved = null;

    /** 
     * Community-defined common weakness enumerations (CWE).
     * @var string[]
     */
    public array $commonWeaknessEnumerationIds = [];

    /** The date and time when this vulnerability article was first created. */
    public ?\DateTimeInterface $createdDateTime = null;

    /**  */
    public ?SecurityCvssSummary $cvss2Summary = null;

    /**  */
    public ?SecurityCvssSummary $cvss3Summary = null;

    /**  */
    public ?SecurityFormattedContent $description = null;

    /** 
     * Known exploits for this vulnerability.
     * @var SecurityHyperlink[]
     */
    public array $exploits = [];

    /** Indicates whether this vulnerability has exploits in public sources (such as Packetstorm or Exploit-DB) online. */
    public ?bool $exploitsAvailable = null;

    /** Indicates whether chatter about this vulnerability has been discovered online. */
    public ?bool $hasChatter = null;

    /** The date and time when this vulnerability article was most recently updated. */
    public ?\DateTimeInterface $lastModifiedDateTime = null;

    /** A unique algorithm that reflects the priority of a vulnerability based on the CVSS score, exploits, chatter, and linkage to malware. This property also evaluates the recency of these components so users can understand which vulnerability should be remediated first. */
    public ?float $priorityScore = null;

    /** The date and time when this vulnerability article was published. */
    public ?\DateTimeInterface $publishedDateTime = null;

    /** 
     * Reference links where further information can be learned about this vulnerability.
     * @var SecurityHyperlink[]
     */
    public array $references = [];

    /** 
     * Any known remediation steps.
     * @var SecurityFormattedContent|\stdClass|null
     */
    public SecurityFormattedContent|\stdClass|null $remediation = null;

    /**  */
    public ?SecurityVulnerabilitySeverity $severity = null;

    /** 
     * Articles related to this vulnerability.
     * @var SecurityArticle[]
     */
    public array $articles = [];

    /** 
     * Components related to this vulnerability article.
     * @var SecurityVulnerabilityComponent[]
     */
    public array $components = [];


    /**
     * Constructor - fast deserialization
     * @param array<string, mixed> $data
     */
    public function __construct(array $data = [])
    {
        $this->rawData = $data;
        if (isset($data['id'])) {
            $this->id = $data['id'];
        }
        if (isset($data['activeExploitsObserved'])) {
            $this->activeExploitsObserved = is_bool($data['activeExploitsObserved']) ? $data['activeExploitsObserved'] : (bool)$data['activeExploitsObserved'];
        }
        if (isset($data['commonWeaknessEnumerationIds'])) {
            $this->commonWeaknessEnumerationIds = $data['commonWeaknessEnumerationIds'];
        }
        if (isset($data['createdDateTime'])) {
            $this->createdDateTime = is_string($data['createdDateTime']) ? new \DateTimeImmutable($data['createdDateTime']) : $data['createdDateTime'];
        }
        if (isset($data['cvss2Summary'])) {
            $this->cvss2Summary = is_array($data['cvss2Summary']) ? new SecurityCvssSummary($data['cvss2Summary']) : $data['cvss2Summary'];
        }
        if (isset($data['cvss3Summary'])) {
            $this->cvss3Summary = is_array($data['cvss3Summary']) ? new SecurityCvssSummary($data['cvss3Summary']) : $data['cvss3Summary'];
        }
        if (isset($data['description'])) {
            $this->description = is_array($data['description']) ? new SecurityFormattedContent($data['description']) : $data['description'];
        }
        if (isset($data['exploits'])) {
            $this->exploits = $data['exploits'];
        }
        if (isset($data['exploitsAvailable'])) {
            $this->exploitsAvailable = is_bool($data['exploitsAvailable']) ? $data['exploitsAvailable'] : (bool)$data['exploitsAvailable'];
        }
        if (isset($data['hasChatter'])) {
            $this->hasChatter = is_bool($data['hasChatter']) ? $data['hasChatter'] : (bool)$data['hasChatter'];
        }
        if (isset($data['lastModifiedDateTime'])) {
            $this->lastModifiedDateTime = is_string($data['lastModifiedDateTime']) ? new \DateTimeImmutable($data['lastModifiedDateTime']) : $data['lastModifiedDateTime'];
        }
        if (isset($data['priorityScore'])) {
            $this->priorityScore = is_numeric($data['priorityScore']) ? (float)$data['priorityScore'] : $data['priorityScore'];
        }
        if (isset($data['publishedDateTime'])) {
            $this->publishedDateTime = is_string($data['publishedDateTime']) ? new \DateTimeImmutable($data['publishedDateTime']) : $data['publishedDateTime'];
        }
        if (isset($data['references'])) {
            $this->references = $data['references'];
        }
        if (isset($data['remediation'])) {
            $this->remediation = is_array($data['remediation']) ? new SecurityFormattedContent($data['remediation']) : $data['remediation'];
        }
        if (isset($data['severity'])) {
            $this->severity = is_string($data['severity']) ? SecurityVulnerabilitySeverity::tryFrom($data['severity']) : $data['severity'];
        }
        if (isset($data['articles'])) {
            $this->articles = $data['articles'];
        }
        if (isset($data['components'])) {
            $this->components = $data['components'];
        }
    }

    /**
     * Get raw data from API response
     * @return array<string, mixed>
     */
    public function getRaw(): array
    {
        return $this->rawData;
    }
}
