<?php

declare(strict_types=1);

namespace ApeDevDe\MicrosoftGraphSdk\Models;

/**
 * SecurityAnalyzedMessageEvidence
 */
class SecurityAnalyzedMessageEvidence
{
    /** @var array<string, mixed> Raw data from API response */
    private array $rawData = [];

    /** The date and time when the evidence was created and added to the alert. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    public ?\DateTimeInterface $createdDateTime = null;

    /** 
     * Detailed description of the entity role/s in an alert. Values are free-form.
     * @var string[]
     */
    public array $detailedRoles = [];

    /**  */
    public ?SecurityEvidenceRemediationStatus $remediationStatus = null;

    /** Details about the remediation status. */
    public ?string $remediationStatusDetails = null;

    /** 
     * The role/s that an evidence entity represents in an alert, for example, an IP address that is associated with an attacker has the evidence role Attacker.
     * @var SecurityEvidenceRole[]
     */
    public array $roles = [];

    /** 
     * Array of custom tags associated with an evidence instance, for example, to denote a group of devices, high-value assets, etc.
     * @var string[]
     */
    public array $tags = [];

    /**  */
    public ?SecurityEvidenceVerdict $verdict = null;

    /** Direction of the email relative to your network. The possible values are: inbound, outbound or intraorg. */
    public ?string $antiSpamDirection = null;

    /** Number of attachments in the email. */
    public ?float $attachmentsCount = null;

    /** Delivery action of the email. The possible values are: delivered, deliveredAsSpam, junked, blocked, or replaced. */
    public ?string $deliveryAction = null;

    /** Location where the email was delivered. The possible values are: inbox, external, junkFolder, quarantine, failed, dropped, deletedFolder or forwarded. */
    public ?string $deliveryLocation = null;

    /** Public-facing identifier for the email that is set by the sending email system. */
    public ?string $internetMessageId = null;

    /** Detected language of the email content. */
    public ?string $language = null;

    /** Unique identifier for the email, generated by Microsoft 365. */
    public ?string $networkMessageId = null;

    /** 
     * The P1 sender.
     * @var SecurityEmailSender|\stdClass|null
     */
    public mixed $p1Sender = null;

    /** 
     * The P2 sender.
     * @var SecurityEmailSender|\stdClass|null
     */
    public mixed $p2Sender = null;

    /** Date and time when the email was received. */
    public ?\DateTimeInterface $receivedDateTime = null;

    /** Email address of the recipient, or email address of the recipient after distribution list expansion. */
    public ?string $recipientEmailAddress = null;

    /** IP address of the last detected mail server that relayed the message. */
    public ?string $senderIp = null;

    /** Subject of the email. */
    public ?string $subject = null;

    /** 
     * Collection of methods used to detect malware, phishing, or other threats found in the email.
     * @var string[]
     */
    public array $threatDetectionMethods = [];

    /** 
     * Collection of detection names for malware or other threats found.
     * @var string[]
     */
    public array $threats = [];

    /** Number of embedded URLs in the email. */
    public ?float $urlCount = null;

    /** 
     * Collection of the URLs contained in this email.
     * @var string[]
     */
    public array $urls = [];

    /** Uniform resource name (URN) of the automated investigation where the cluster was identified. */
    public ?string $urn = null;


    /**
     * Constructor - fast deserialization
     * @param array<string, mixed> $data
     */
    public function __construct(array $data = [])
    {
        $this->rawData = $data;
        if (isset($data['createdDateTime'])) {
            $this->createdDateTime = is_string($data['createdDateTime']) ? new \DateTimeImmutable($data['createdDateTime']) : $data['createdDateTime'];
        }
        if (isset($data['detailedRoles'])) {
            $this->detailedRoles = $data['detailedRoles'];
        }
        if (isset($data['remediationStatus'])) {
            $this->remediationStatus = is_array($data['remediationStatus']) ? new SecurityEvidenceRemediationStatus($data['remediationStatus']) : $data['remediationStatus'];
        }
        if (isset($data['remediationStatusDetails'])) {
            $this->remediationStatusDetails = $data['remediationStatusDetails'];
        }
        if (isset($data['roles'])) {
            $this->roles = $data['roles'];
        }
        if (isset($data['tags'])) {
            $this->tags = $data['tags'];
        }
        if (isset($data['verdict'])) {
            $this->verdict = is_array($data['verdict']) ? new SecurityEvidenceVerdict($data['verdict']) : $data['verdict'];
        }
        if (isset($data['antiSpamDirection'])) {
            $this->antiSpamDirection = $data['antiSpamDirection'];
        }
        if (isset($data['attachmentsCount'])) {
            $this->attachmentsCount = $data['attachmentsCount'];
        }
        if (isset($data['deliveryAction'])) {
            $this->deliveryAction = $data['deliveryAction'];
        }
        if (isset($data['deliveryLocation'])) {
            $this->deliveryLocation = $data['deliveryLocation'];
        }
        if (isset($data['internetMessageId'])) {
            $this->internetMessageId = $data['internetMessageId'];
        }
        if (isset($data['language'])) {
            $this->language = $data['language'];
        }
        if (isset($data['networkMessageId'])) {
            $this->networkMessageId = $data['networkMessageId'];
        }
        if (isset($data['p1Sender'])) {
            $this->p1Sender = is_array($data['p1Sender']) ? new SecurityEmailSender($data['p1Sender']) : $data['p1Sender'];
        }
        if (isset($data['p2Sender'])) {
            $this->p2Sender = is_array($data['p2Sender']) ? new SecurityEmailSender($data['p2Sender']) : $data['p2Sender'];
        }
        if (isset($data['receivedDateTime'])) {
            $this->receivedDateTime = is_string($data['receivedDateTime']) ? new \DateTimeImmutable($data['receivedDateTime']) : $data['receivedDateTime'];
        }
        if (isset($data['recipientEmailAddress'])) {
            $this->recipientEmailAddress = $data['recipientEmailAddress'];
        }
        if (isset($data['senderIp'])) {
            $this->senderIp = $data['senderIp'];
        }
        if (isset($data['subject'])) {
            $this->subject = $data['subject'];
        }
        if (isset($data['threatDetectionMethods'])) {
            $this->threatDetectionMethods = $data['threatDetectionMethods'];
        }
        if (isset($data['threats'])) {
            $this->threats = $data['threats'];
        }
        if (isset($data['urlCount'])) {
            $this->urlCount = $data['urlCount'];
        }
        if (isset($data['urls'])) {
            $this->urls = $data['urls'];
        }
        if (isset($data['urn'])) {
            $this->urn = $data['urn'];
        }
    }

    /**
     * Get raw data from API response
     * @return array<string, mixed>
     */
    public function getRaw(): array
    {
        return $this->rawData;
    }
}
