<?php

declare(strict_types=1);

namespace ApeDevDe\MicrosoftGraphSdk\Models;

/**
 * WindowsDeviceMalwareState
 */
class WindowsDeviceMalwareState
{
    /**
     * Information URL to learn more about the malware
     */
    private ?string $additionalInformationUrl;

    /**
     * Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
     */
    private ?string $category;

    /**
     * Number of times the malware is detected
     */
    private ?float $detectionCount;

    /**
     * Malware name
     */
    private ?string $displayName;

    /**
     * Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
     */
    private ?string $executionState;

    /**
     * Initial detection datetime of the malware
     */
    private ?\DateTimeInterface $initialDetectionDateTime;

    /**
     * The last time this particular threat was changed
     */
    private ?\DateTimeInterface $lastStateChangeDateTime;

    /**
     * Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
     */
    private ?string $severity;

    /**
     * Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.
     */
    private ?string $state;

    /**
     * Malware detection entity.
     */
    private ?string $threatState;


    public function getAdditionalInformationUrl(): ?string
    {
        return $this->additionalInformationUrl;
    }

    public function setAdditionalInformationUrl(?string $additionalInformationUrl): self
    {
        $this->additionalInformationUrl = $additionalInformationUrl;
        return $this;
    }

    public function getCategory(): ?string
    {
        return $this->category;
    }

    public function setCategory(?string $category): self
    {
        $this->category = $category;
        return $this;
    }

    public function getDetectionCount(): ?float
    {
        return $this->detectionCount;
    }

    public function setDetectionCount(?float $detectionCount): self
    {
        $this->detectionCount = $detectionCount;
        return $this;
    }

    public function getDisplayName(): ?string
    {
        return $this->displayName;
    }

    public function setDisplayName(?string $displayName): self
    {
        $this->displayName = $displayName;
        return $this;
    }

    public function getExecutionState(): ?string
    {
        return $this->executionState;
    }

    public function setExecutionState(?string $executionState): self
    {
        $this->executionState = $executionState;
        return $this;
    }

    public function getInitialDetectionDateTime(): ?\DateTimeInterface
    {
        return $this->initialDetectionDateTime;
    }

    public function setInitialDetectionDateTime(?\DateTimeInterface $initialDetectionDateTime): self
    {
        $this->initialDetectionDateTime = $initialDetectionDateTime;
        return $this;
    }

    public function getLastStateChangeDateTime(): ?\DateTimeInterface
    {
        return $this->lastStateChangeDateTime;
    }

    public function setLastStateChangeDateTime(?\DateTimeInterface $lastStateChangeDateTime): self
    {
        $this->lastStateChangeDateTime = $lastStateChangeDateTime;
        return $this;
    }

    public function getSeverity(): ?string
    {
        return $this->severity;
    }

    public function setSeverity(?string $severity): self
    {
        $this->severity = $severity;
        return $this;
    }

    public function getState(): ?string
    {
        return $this->state;
    }

    public function setState(?string $state): self
    {
        $this->state = $state;
        return $this;
    }

    public function getThreatState(): ?string
    {
        return $this->threatState;
    }

    public function setThreatState(?string $threatState): self
    {
        $this->threatState = $threatState;
        return $this;
    }

}
