<?php

declare(strict_types=1);

namespace ApeDevDe\MicrosoftGraphSdk\Models;

/**
 * WindowsDeviceMalwareState
 */
class WindowsDeviceMalwareState
{
    /** @var array<string, mixed> Raw data from API response */
    private array $rawData = [];

    /** The unique identifier for an entity. Read-only. */
    public ?string $id = null;

    /** Information URL to learn more about the malware */
    public ?string $additionalInformationUrl = null;

    /** 
     * Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
     * @var WindowsMalwareCategory|\stdClass|null
     */
    public WindowsMalwareCategory|\stdClass|null $category = null;

    /** Number of times the malware is detected */
    public ?float $detectionCount = null;

    /** Malware name */
    public ?string $displayName = null;

    /** 
     * Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
     * @var WindowsMalwareExecutionState|\stdClass|null
     */
    public WindowsMalwareExecutionState|\stdClass|null $executionState = null;

    /** Initial detection datetime of the malware */
    public ?\DateTimeInterface $initialDetectionDateTime = null;

    /** The last time this particular threat was changed */
    public ?\DateTimeInterface $lastStateChangeDateTime = null;

    /** 
     * Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
     * @var WindowsMalwareSeverity|\stdClass|null
     */
    public WindowsMalwareSeverity|\stdClass|null $severity = null;

    /** 
     * Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.
     * @var WindowsMalwareState|\stdClass|null
     */
    public WindowsMalwareState|\stdClass|null $state = null;

    /** 
     * Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
     * @var WindowsMalwareThreatState|\stdClass|null
     */
    public WindowsMalwareThreatState|\stdClass|null $threatState = null;


    /**
     * Constructor - fast deserialization
     * @param array<string, mixed> $data
     */
    public function __construct(array $data = [])
    {
        $this->rawData = $data;
        if (isset($data['id'])) {
            $this->id = $data['id'];
        }
        if (isset($data['additionalInformationUrl'])) {
            $this->additionalInformationUrl = $data['additionalInformationUrl'];
        }
        if (isset($data['category'])) {
            $this->category = is_string($data['category']) ? WindowsMalwareCategory::tryFrom($data['category']) : $data['category'];
        }
        if (isset($data['detectionCount'])) {
            $this->detectionCount = is_numeric($data['detectionCount']) ? (float)$data['detectionCount'] : $data['detectionCount'];
        }
        if (isset($data['displayName'])) {
            $this->displayName = $data['displayName'];
        }
        if (isset($data['executionState'])) {
            $this->executionState = is_string($data['executionState']) ? WindowsMalwareExecutionState::tryFrom($data['executionState']) : $data['executionState'];
        }
        if (isset($data['initialDetectionDateTime'])) {
            $this->initialDetectionDateTime = is_string($data['initialDetectionDateTime']) ? new \DateTimeImmutable($data['initialDetectionDateTime']) : $data['initialDetectionDateTime'];
        }
        if (isset($data['lastStateChangeDateTime'])) {
            $this->lastStateChangeDateTime = is_string($data['lastStateChangeDateTime']) ? new \DateTimeImmutable($data['lastStateChangeDateTime']) : $data['lastStateChangeDateTime'];
        }
        if (isset($data['severity'])) {
            $this->severity = is_string($data['severity']) ? WindowsMalwareSeverity::tryFrom($data['severity']) : $data['severity'];
        }
        if (isset($data['state'])) {
            $this->state = is_string($data['state']) ? WindowsMalwareState::tryFrom($data['state']) : $data['state'];
        }
        if (isset($data['threatState'])) {
            $this->threatState = is_string($data['threatState']) ? WindowsMalwareThreatState::tryFrom($data['threatState']) : $data['threatState'];
        }
    }

    /**
     * Get raw data from API response
     * @return array<string, mixed>
     */
    public function getRaw(): array
    {
        return $this->rawData;
    }
}
