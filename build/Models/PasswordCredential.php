<?php

declare(strict_types=1);

namespace ApeDevDe\MicrosoftGraphSdk\Models;

/**
 * PasswordCredential
 */
class PasswordCredential
{
    /**
     * Do not use.
     */
    private ?string $customKeyIdentifier;

    /**
     * Friendly name for the password. Optional.
     */
    private ?string $displayName;

    /**
     * The date and time at which the password expires represented using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
     */
    private ?\DateTimeInterface $endDateTime;

    /**
     * Contains the first three characters of the password. Read-only.
     */
    private ?string $hint;

    /**
     * The unique identifier for the password.
     */
    private ?string $keyId;

    /**
     * Read-only; Contains the strong passwords generated by Microsoft Entra ID that are 16-64 characters in length. The generated password value is only returned during the initial POST request to addPassword. There is no way to retrieve this password in the future.
     */
    private ?string $secretText;

    /**
     * The date and time at which the password becomes valid. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
     */
    private ?\DateTimeInterface $startDateTime;


    public function getCustomKeyIdentifier(): ?string
    {
        return $this->customKeyIdentifier;
    }

    public function setCustomKeyIdentifier(?string $customKeyIdentifier): self
    {
        $this->customKeyIdentifier = $customKeyIdentifier;
        return $this;
    }

    public function getDisplayName(): ?string
    {
        return $this->displayName;
    }

    public function setDisplayName(?string $displayName): self
    {
        $this->displayName = $displayName;
        return $this;
    }

    public function getEndDateTime(): ?\DateTimeInterface
    {
        return $this->endDateTime;
    }

    public function setEndDateTime(?\DateTimeInterface $endDateTime): self
    {
        $this->endDateTime = $endDateTime;
        return $this;
    }

    public function getHint(): ?string
    {
        return $this->hint;
    }

    public function setHint(?string $hint): self
    {
        $this->hint = $hint;
        return $this;
    }

    public function getKeyId(): ?string
    {
        return $this->keyId;
    }

    public function setKeyId(?string $keyId): self
    {
        $this->keyId = $keyId;
        return $this;
    }

    public function getSecretText(): ?string
    {
        return $this->secretText;
    }

    public function setSecretText(?string $secretText): self
    {
        $this->secretText = $secretText;
        return $this;
    }

    public function getStartDateTime(): ?\DateTimeInterface
    {
        return $this->startDateTime;
    }

    public function setStartDateTime(?\DateTimeInterface $startDateTime): self
    {
        $this->startDateTime = $startDateTime;
        return $this;
    }

}
