<?php

declare(strict_types=1);

namespace ApeDevDe\MicrosoftGraphSdk\Models;

/**
 * WindowsMalwareInformation
 */
class WindowsMalwareInformation
{
    /** @var array<string, mixed> Raw data from API response */
    private array $rawData = [];

    /** The unique identifier for an entity. Read-only. */
    public ?string $id = null;

    /** Indicates an informational URL to learn more about the malware */
    public ?string $additionalInformationUrl = null;

    /** 
     * Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule. default value is invalid. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
     * @var WindowsMalwareCategory|\stdClass|null
     */
    public WindowsMalwareCategory|\stdClass|null $category = null;

    /** Indicates the name of the malware */
    public ?string $displayName = null;

    /** Indicates the last time the malware was detected in UTC */
    public ?\DateTimeInterface $lastDetectionDateTime = null;

    /** 
     * Severity of the malware. Possible values are: unknown, low, moderate, high, severe. default is unknown. Possible values are: unknown, low, moderate, high, severe.
     * @var WindowsMalwareSeverity|\stdClass|null
     */
    public WindowsMalwareSeverity|\stdClass|null $severity = null;

    /** 
     * List of devices affected by current malware with the malware state on each device
     * @var MalwareStateForWindowsDevice[]
     */
    public array $deviceMalwareStates = [];


    /**
     * Constructor - fast deserialization
     * @param array<string, mixed> $data
     */
    public function __construct(array $data = [])
    {
        $this->rawData = $data;
        if (isset($data['id'])) {
            $this->id = $data['id'];
        }
        if (isset($data['additionalInformationUrl'])) {
            $this->additionalInformationUrl = $data['additionalInformationUrl'];
        }
        if (isset($data['category'])) {
            $this->category = is_string($data['category']) ? WindowsMalwareCategory::tryFrom($data['category']) : $data['category'];
        }
        if (isset($data['displayName'])) {
            $this->displayName = $data['displayName'];
        }
        if (isset($data['lastDetectionDateTime'])) {
            $this->lastDetectionDateTime = is_string($data['lastDetectionDateTime']) ? new \DateTimeImmutable($data['lastDetectionDateTime']) : $data['lastDetectionDateTime'];
        }
        if (isset($data['severity'])) {
            $this->severity = is_string($data['severity']) ? WindowsMalwareSeverity::tryFrom($data['severity']) : $data['severity'];
        }
        if (isset($data['deviceMalwareStates'])) {
            $this->deviceMalwareStates = $data['deviceMalwareStates'];
        }
    }

    /**
     * Get raw data from API response
     * @return array<string, mixed>
     */
    public function getRaw(): array
    {
        return $this->rawData;
    }
}
