<?php

declare(strict_types=1);

namespace ApeDevDe\MicrosoftGraphSdk\Models;

/**
 * WindowsMalwareInformation
 */
class WindowsMalwareInformation
{
    /**
     * Indicates an informational URL to learn more about the malware
     */
    private ?string $additionalInformationUrl;

    /**
     * Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule. default value is invalid. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
     */
    private ?string $category;

    /**
     * Indicates the name of the malware
     */
    private ?string $displayName;

    /**
     * Indicates the last time the malware was detected in UTC
     */
    private ?\DateTimeInterface $lastDetectionDateTime;

    /**
     * Severity of the malware. Possible values are: unknown, low, moderate, high, severe. default is unknown. Possible values are: unknown, low, moderate, high, severe.
     */
    private ?string $severity;

    /**
     * Malware information entity.
     * @var string[]
     */
    private array $deviceMalwareStates = [];


    public function getAdditionalInformationUrl(): ?string
    {
        return $this->additionalInformationUrl;
    }

    public function setAdditionalInformationUrl(?string $additionalInformationUrl): self
    {
        $this->additionalInformationUrl = $additionalInformationUrl;
        return $this;
    }

    public function getCategory(): ?string
    {
        return $this->category;
    }

    public function setCategory(?string $category): self
    {
        $this->category = $category;
        return $this;
    }

    public function getDisplayName(): ?string
    {
        return $this->displayName;
    }

    public function setDisplayName(?string $displayName): self
    {
        $this->displayName = $displayName;
        return $this;
    }

    public function getLastDetectionDateTime(): ?\DateTimeInterface
    {
        return $this->lastDetectionDateTime;
    }

    public function setLastDetectionDateTime(?\DateTimeInterface $lastDetectionDateTime): self
    {
        $this->lastDetectionDateTime = $lastDetectionDateTime;
        return $this;
    }

    public function getSeverity(): ?string
    {
        return $this->severity;
    }

    public function setSeverity(?string $severity): self
    {
        $this->severity = $severity;
        return $this;
    }

    /**
     * @return string[]
     */
    public function getDeviceMalwareStates(): array
    {
        return $this->deviceMalwareStates;
    }

    /**
     * @param string[] $deviceMalwareStates
     */
    public function setDeviceMalwareStates(array $deviceMalwareStates): self
    {
        $this->deviceMalwareStates = $deviceMalwareStates;
        return $this;
    }

}
