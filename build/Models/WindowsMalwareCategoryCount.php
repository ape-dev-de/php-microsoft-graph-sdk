<?php

declare(strict_types=1);

namespace ApeDevDe\MicrosoftGraphSdk\Models;

/**
 * WindowsMalwareCategoryCount
 */
class WindowsMalwareCategoryCount
{
    /** @var array<string, mixed> Raw data from API response */
    private array $rawData = [];

    /** Count of active malware detections for this malware category. Valid values -2147483648 to 2147483647 */
    public ?float $activeMalwareDetectionCount = null;

    /**  */
    public ?WindowsMalwareCategory $category = null;

    /** Count of devices with malware detections for this malware category */
    public ?float $deviceCount = null;

    /** Count of distinct active malwares for this malware category. Valid values -2147483648 to 2147483647 */
    public ?float $distinctActiveMalwareCount = null;

    /** The Timestamp of the last update for the device count in UTC */
    public ?\DateTimeInterface $lastUpdateDateTime = null;


    /**
     * Constructor - fast deserialization
     * @param array<string, mixed> $data
     */
    public function __construct(array $data = [])
    {
        $this->rawData = $data;
        if (isset($data['activeMalwareDetectionCount'])) {
            $this->activeMalwareDetectionCount = is_numeric($data['activeMalwareDetectionCount']) ? (float)$data['activeMalwareDetectionCount'] : $data['activeMalwareDetectionCount'];
        }
        if (isset($data['category'])) {
            $this->category = is_array($data['category']) ? new WindowsMalwareCategory($data['category']) : $data['category'];
        }
        if (isset($data['deviceCount'])) {
            $this->deviceCount = is_numeric($data['deviceCount']) ? (float)$data['deviceCount'] : $data['deviceCount'];
        }
        if (isset($data['distinctActiveMalwareCount'])) {
            $this->distinctActiveMalwareCount = is_numeric($data['distinctActiveMalwareCount']) ? (float)$data['distinctActiveMalwareCount'] : $data['distinctActiveMalwareCount'];
        }
        if (isset($data['lastUpdateDateTime'])) {
            $this->lastUpdateDateTime = is_string($data['lastUpdateDateTime']) ? new \DateTimeImmutable($data['lastUpdateDateTime']) : $data['lastUpdateDateTime'];
        }
    }

    /**
     * Get raw data from API response
     * @return array<string, mixed>
     */
    public function getRaw(): array
    {
        return $this->rawData;
    }
}
