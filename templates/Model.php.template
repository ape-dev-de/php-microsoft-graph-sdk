<?= "<?php" ?>


declare(strict_types=1);

namespace ApeDevDe\MicrosoftGraphSdk\Models;

/**
 * <?= $MODEL_NAME ?>

 */
class <?= $MODEL_NAME ?>

{
    /** @var array<string, mixed> Raw data from API response */
    private array $rawData = [];

<?php 
// Sort properties to put 'id' first if it exists
$sortedProperties = [];
if (isset($PROPERTIES['id'])) {
    $sortedProperties['id'] = $PROPERTIES['id'];
}
foreach ($PROPERTIES as $propName => $propDef) {
    if ($propName !== 'id') {
        $sortedProperties[$propName] = $propDef;
    }
}

$propCount = count($sortedProperties);
$currentIndex = 0;
foreach ($sortedProperties as $propName => $propDef): 
    $currentIndex++;
    $type = $propDef['type'];
    $description = $propDef['description'] ?? '';
    $isLast = $currentIndex === $propCount;
    // Normalize property name: convert dashes to camelCase for valid PHP variable names
    // Also handle @microsoft.graph.* properties by removing the prefix
    $normalizedPropName = str_starts_with($propName, '@microsoft.graph.') 
        ? substr($propName, strlen('@microsoft.graph.')) 
        : $propName;
    $phpPropName = lcfirst(str_replace(' ', '', ucwords(str_replace('-', ' ', $normalizedPropName))));
    $hasUnion = str_contains($type, '|');
    $isArray = $type === 'array';
    // Check if type is nullable (starts with ?)
    $isNullable = str_starts_with($type, '?');
    $cleanTypeForDoc = str_replace('?', '', $type);
?>
<?php if ($isArray): ?>
    /** 
     * <?= $description ? $description : '' ?>

     * @var <?= !empty($propDef['itemType']) ? $propDef['itemType'] . '[]' : 'array<int, mixed>' ?>

     */
    public array $<?= $phpPropName ?> = [];

<?php elseif ($hasUnion): ?>
    /** 
     * <?= $description ? $description : '' ?>

     * @var <?= $cleanTypeForDoc ?>|null
     */
    public <?= $cleanTypeForDoc ?>|null $<?= $phpPropName ?> = null;

<?php else: ?>
    /** <?= $description ? $description : '' ?> */
    public <?= str_starts_with($type, '?') ? $type : '?' . $type ?> $<?= $phpPropName ?> = null;

<?php endif; ?>
<?php endforeach; ?>

    /**
     * Constructor - fast deserialization
     * @param array<string, mixed> $data
     */
    public function __construct(array $data = [])
    {
        $this->rawData = $data;
<?php if (!empty($sortedProperties)): ?>
<?php foreach ($sortedProperties as $propName => $propDef): 
    // Normalize property name: handle @microsoft.graph.* properties
    $normalizedPropName = str_starts_with($propName, '@microsoft.graph.') 
        ? substr($propName, strlen('@microsoft.graph.')) 
        : $propName;
    $phpPropName = lcfirst(str_replace(' ', '', ucwords(str_replace('-', ' ', $normalizedPropName))));
    $type = $propDef['type'];
    $isArray = $propDef['type'] === 'array';
    $isDateTime = str_contains($type, 'DateTimeInterface');
    
    // Check if it's a complex type (model class) that needs instantiation
    $cleanType = str_replace(['?', '|null', '\\stdClass', '|\\stdClass'], '', $type);
    $cleanType = trim($cleanType, '|'); // Remove trailing/leading pipes
    $isPrimitive = in_array($cleanType, ['string', 'int', 'bool', 'float', 'mixed', 'array']);
    $isComplexType = !$isPrimitive && !$isDateTime && !$isArray && !empty($cleanType) && ctype_upper($cleanType[0]);
    
    // Check for specific primitive types that need casting
    $isFloat = $cleanType === 'float' || str_contains($type, 'float');
    $isInt = $cleanType === 'int' || str_contains($type, 'int');
    $isBool = $cleanType === 'bool' || str_contains($type, 'bool');
?>
        if (isset($data['<?= $propName ?>'])) {
<?php if ($isDateTime): ?>
            $this-><?= $phpPropName ?> = is_string($data['<?= $propName ?>']) ? new \DateTimeImmutable($data['<?= $propName ?>']) : $data['<?= $propName ?>'];
<?php elseif ($propDef['isEnum'] ?? false): ?>
            $this-><?= $phpPropName ?> = is_string($data['<?= $propName ?>']) ? <?= $cleanType ?>::tryFrom($data['<?= $propName ?>']) : $data['<?= $propName ?>'];
<?php elseif ($isComplexType): ?>
            $this-><?= $phpPropName ?> = is_array($data['<?= $propName ?>']) ? new <?= $cleanType ?>($data['<?= $propName ?>']) : $data['<?= $propName ?>'];
<?php elseif ($isFloat): ?>
            $this-><?= $phpPropName ?> = is_numeric($data['<?= $propName ?>']) ? (float)$data['<?= $propName ?>'] : $data['<?= $propName ?>'];
<?php elseif ($isInt): ?>
            $this-><?= $phpPropName ?> = is_numeric($data['<?= $propName ?>']) ? (int)$data['<?= $propName ?>'] : $data['<?= $propName ?>'];
<?php elseif ($isBool): ?>
            $this-><?= $phpPropName ?> = is_bool($data['<?= $propName ?>']) ? $data['<?= $propName ?>'] : (bool)$data['<?= $propName ?>'];
<?php else: ?>
            $this-><?= $phpPropName ?> = $data['<?= $propName ?>'];
<?php endif; ?>
        }
<?php endforeach; ?>
<?php endif; ?>
    }

    /**
     * Get raw data from API response
     * @return array<string, mixed>
     */
    public function getRaw(): array
    {
        return $this->rawData;
    }
}
